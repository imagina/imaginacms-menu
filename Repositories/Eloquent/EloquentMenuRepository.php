<?php

namespace Modules\Menu\Repositories\Eloquent;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Facades\App;
use Modules\Core\Icrud\Repositories\Eloquent\EloquentCrudRepository;
use Modules\Menu\Events\MenuIsCreating;
use Modules\Menu\Events\MenuIsUpdating;
use Modules\Menu\Events\MenuWasCreated;
use Modules\Menu\Events\MenuWasUpdated;
use Modules\Menu\Repositories\MenuRepository;
use Stancl\Tenancy\Database\Concerns\BelongsToTenant;

class EloquentMenuRepository extends EloquentCrudRepository implements MenuRepository
{
  /**
   * Filter names to replace
   * @var array
   */
  protected $replaceFilters = ["status"];

  /**
   * Relation names to replace
   * @var array
   */
  protected $replaceSyncModelRelations = [];

  /**
   * Filter query
   *
   * @param $query
   * @param $filter
   * @param $params
   * @return mixed
   */
  public function filterQuery($query, $filter, $params)
  {

    /**
     * Note: Add filter name to replaceFilters attribute before replace it
     *
     * Example filter Query
     * if (isset($filter->status)) $query->where('status', $filter->status);
     *
     */

    //add filter by search
    if (isset($filter->search)) {
      //find search in columns
      $query->where(function ($query) use ($filter) {
        $query->whereHas('translations', function ($query) use ($filter) {
          $query->where('locale', $filter->locale)
            ->where('title', 'like', '%' . $filter->search . '%');
        })->orWhere('id', 'like', '%' . $filter->search . '%')
          ->orWhere('updated_at', 'like', '%' . $filter->search . '%')
          ->orWhere('created_at', 'like', '%' . $filter->search . '%');
      });
    }

    //add filter by search
    if (isset($filter->status)) {
      //find search in columns
      $query->where(function ($query) use ($filter) {
        $query->whereHas('translations', function ($query) use ($filter) {
          $query->where('status', $filter->status);
        });
      });
    }

    //Filter by name
    if (isset($filter->name)) {
      $query->where('name', $filter->name);
    }

    $this->validateTenantWithCentralData($query);

    //Response
    return $query;
  }

  /**
   * Method to sync Model Relations
   *
   * @param $model ,$data
   * @return $model
   */
  public function syncModelRelations($model, $data)
  {
    //Get model relations data from attribute of model
    $modelRelationsData = ($model->modelRelations ?? []);

    /**
     * Note: Add relation name to replaceSyncModelRelations attribute before replace it
     *
     * Example to sync relations
     * if (array_key_exists(<relationName>, $data)){
     *    $model->setRelation(<relationName>, $model-><relationName>()->sync($data[<relationName>]));
     * }
     *
     */

    //Response
    return $model;
  }

  public function validateTenantWithCentralData($query)
  {
    $entitiesWithCentralData = json_decode(setting('isite::tenantWithCentralData', null, '[]', true));
    $tenantWithCentralData = in_array('menu', $entitiesWithCentralData);

    if ($tenantWithCentralData && isset(tenant()->id)) {
      $model = $this->model;

      $query->withoutTenancy();
      $query->where(function ($query) use ($model) {
        $query->where($model->qualifyColumn(BelongsToTenant::$tenantIdColumn), tenant()->getTenantKey())
          ->orWhereNull($model->qualifyColumn(BelongsToTenant::$tenantIdColumn));
      });
    } else {
      // Validation like DEEV
      // When user is going to pay the plan in central checkout
      if (config("tenancy.mode") != NULL && config("tenancy.mode") == "singleDatabase" && is_null(tenant()))
        $query->where("organization_id", null);
    }

  }

  /**
   * Get all online menus
   */
  public function allOnline()
  {
    $locale = App::getLocale();

    return $this->model->whereHas('translations', function (Builder $q) use ($locale) {
      $q->where('locale', "$locale");
      $q->where('status', 1);
    })->with('translations')->orderBy('created_at', 'DESC')->get();
  }

  public function create($data)
  {
    event($event = new MenuIsCreating($data));

    $model = parent::create($event->getAttributes()); // TODO: Change the autogenerated stub

    event(new MenuWasCreated($model));

    return $model;

  }

  public function update($menu, $data)
  {
    event($event = new MenuIsUpdating($menu, $data));

    $model = parent::create($event->getAttributes()); // TODO: Change the autogenerated stub

    event(new MenuWasUpdated($model));

    return $model;
  }
}